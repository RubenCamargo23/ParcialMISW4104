name: Workflow para creacion de release y merge a master

on:
  workflow_dispatch:
    inputs:
      version:
        required: false
        default: ''
        type: string

jobs:
  # JOB 1: Tests y Validaci√≥n
  test-and-build:
    name: Tests y Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar Lint
        run: npm run lint --if-present
        continue-on-error: true

      - name: Ejecutar tests con Karma/Jasmine
        run: npm test -- --no-watch --code-coverage --browsers=ChromeHeadlessCI

      - name: Verificar cobertura m√≠nima
        run: |
          cd parcial-misw4104
          COVERAGE=$(grep -oP 'Lines\s+:\s+\K[\d.]+' coverage/front/lcov-report/index.html | head -1 || echo "0")
          echo "Cobertura actual: $COVERAGE%"

      - name: Build de producci√≥n
        run: npm run build -- --configuration production

  # JOB 2: Release y Merge (solo si los tests pasan)
  release-and-merge:
    name: Release y Merge a Main
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configurar Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Definir versi√≥n
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            git fetch --tags
            LAST_TAG=$(git tag -l "v*" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)

            if [ -z "$LAST_TAG" ]; then
              VERSION="1.0.0"
            else
              LAST_VERSION=$(echo $LAST_TAG | sed 's/v//')
              MAJOR=$(echo $LAST_VERSION | cut -d. -f1)
              MINOR=$(echo $LAST_VERSION | cut -d. -f2)
              PATCH=$(echo $LAST_VERSION | cut -d. -f3)

              COMMIT_MSG=$(git log -1 --pretty=%B)

              if echo "$COMMIT_MSG" | grep -qi "\[major\]"; then
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
              elif echo "$COMMIT_MSG" | grep -qi "\[minor\]"; then
                MINOR=$((MINOR + 1))
                PATCH=0
              else
                PATCH=$((PATCH + 1))
              fi

              VERSION="$MAJOR.$MINOR.$PATCH"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Versi√≥n definida: v$VERSION"

      - name: Crear rama Release
        run: |
          RELEASE_BRANCH="release_$VERSION"
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
          echo "Creando rama: $RELEASE_BRANCH"

          git push origin --delete "$RELEASE_BRANCH" 2>/dev/null || echo "Rama release no exist√≠a"
          git branch -D "$RELEASE_BRANCH" 2>/dev/null || echo "Rama release no exist√≠a localmente"

          git checkout develop
          git pull origin develop
          git checkout -b "$RELEASE_BRANCH"

          npm version $VERSION --no-git-tag-version

          git add package.json
          git add package-lock.json 2>/dev/null || true
          git commit -m "chore: bump version to $VERSION" || echo "No hay cambios"

          git push -u origin "$RELEASE_BRANCH"

      - name: Mezcla Release -> Main
        if: success()
        run: |
          git checkout main
          git pull origin main

          git merge "$RELEASE_BRANCH" -X theirs -m "chore: merge release $VERSION to main" || {
            echo "Conflicto detectado, resolviendo..."
            git checkout --theirs .
            git add .
            git commit -m "chore: merge release $VERSION to main (auto-resolved)"
          }

          git push origin main

      - name: Crear tag de versi√≥n
        if: success()
        run: |
          git checkout main
          git pull origin main

          if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "Tag v$VERSION ya existe, eliminando..."
            git tag -d "v$VERSION" || true
            git push origin --delete "v$VERSION" || true
          fi

          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "Tag creado: v$VERSION"

      - name: Generar Release Notes
        if: success()
        run: |
          PREV_TAG=$(git tag -l "v*" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n2 | head -n1)

          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "# Release v$VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Cambios desde $PREV_TAG" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### Features ‚ú®" >> RELEASE_NOTES.md
          git log $PREV_TAG..HEAD --oneline --grep="^feat" >> RELEASE_NOTES.md || echo "- Ninguno" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### Bug Fixes üêõ" >> RELEASE_NOTES.md
          git log $PREV_TAG..HEAD --oneline --grep="^fix" >> RELEASE_NOTES.md || echo "- Ninguno" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### Otros cambios üîß" >> RELEASE_NOTES.md
          git log $PREV_TAG..HEAD --oneline --invert-grep --grep="^feat\|^fix" >> RELEASE_NOTES.md || echo "- Ninguno" >> RELEASE_NOTES.md

      - name: Crear GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body_path: ./RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Merge Main -> Develop
        if: success()
        run: |
          git checkout develop
          git pull origin develop
          git merge main -m "chore: sync develop with main after release v$VERSION"
          git push origin develop

      - name: Limpiar rama de release
        if: success()
        run: git push origin --delete "$RELEASE_BRANCH" || echo "Rama ya eliminada"

      - name: Notificar resultado
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Release v$VERSION completado exitosamente"
          else
            echo "‚ùå Error en el proceso de release"
          fi

  # JOB 3: Deploy
  deploy:
    name: Deploy a GitHub Pages
    runs-on: ubuntu-latest
    needs: release-and-merge
    if: success()

    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Build para GitHub Pages
        run: npm run build -- --configuration production --base-href=/ParcialMISW4104/

      - name: Deploy a GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./parcial-misw4104/dist/front
